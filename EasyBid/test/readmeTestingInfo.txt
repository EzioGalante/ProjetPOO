List of automatically run JUnit tests :

--> environment :
	
	
	--> AuctionHall :
	
		- testAuctionHall : testing constructor
		
		- testGetKnownUsers : 
			+ adds 3 users to the "knownUsers" list
			+ uses the getter to check they are all there in the right order
			
		- testGetAuctions : 
			+ adds 1 users to the "knownUsers" list
			+ adds 3 products to the "auctions" list
			+ checks that the 3 products are all in, in the right order
		
		- testAddAuction :
			+ makes valid user
			+ adds user to the "knownUsers" list
			+ adds product to the "auctions" list
			+ checks that the product was added
		
		- testAddUser :
			+ makes valid user
			+ adds user to the "knownUsers" list
			+ checks that the user was added
			
		- testremoveUser :
			+ makes User and adds it to AuctionHall
			+ removes it from the hall
			+ checks the size of the list wa incremented and decremented
			+ checks the list, if the user is found test fails
			
		- testremoveProduct :
			+ makes User and Product and adds them to AuctionHall
			+ removes Product from the AuctionHall
			+ checks the manipulations were correctly managed
			
		- testGiveUserID :
			+ makes 2 Users
			+ checks their id's were correctly given
		

	--> BidTimer :
		- testBidTimer :
			+ make refreshable BidTimer
			+ checks it's refreshable
			
		- testBidTimer :
			+ make fixed BidTimer
			+ checks it isn't refreshable
			
		- testRefreshTime :
			+ makes a refreshable BidTimer
			+ store's it's value as long
			+ checks that the time's refreshed value differs from the initial one
			
	--> Currency :
		- testGetCurrent :
			+ For each Currency case we implemented
			+ assert's each value is the one expected
			
		- testGetRate :
			+ For each Currency case we implemented
			+ assert's each Rate is the one expected
	
	--> Price :
		- testPrice :
			+ tests null value is returned for invalid construction parameters
			
		- testGetValue :
			+ tests getter work's correctly
			
		- testGetCurrency :
			+ tests getter work's correctly
			
		- testConvertTo :
			+ creates Price
			+ converts to all other currencies we implemented
			+ asserts all expected values are true
			
		- testIsWorthMore :
			+ makes Price
			+ asserts isWorthMore returns correct answer
			
		- testGiveMoney :
			+ makes two Prices
			+ gives one the other
			+ asserts that new value is equal to the sum of the two.
			
		- testTakeMoney :
			+ makes two Prices
			+ takes one from the other
			+ asserts that the value is equal to the difference of the two.
			
			
	--> Product :
		
		- testProduct :
			+ tries and catches exceptions generated by any of the constructor's fields being null
			+ in each catch, we also assert that the object that was to be created was set to null
			
		- testGetName, testGetCurrentPrice, testGetOwner :
			+ tests on the getters, just in case
	
		- testGetHighestPriceUser :
			+ requires RaisePrice to be operational in order to have a highestPriceUser
			+ creates 2 Users and a Product
			+ raises the Price of the Product
			+ checks that the getter returned the right user (the one that raised)
			
		- testRaisePrice :
			+ creates 2 Users and a Product
			+ raises the Price of the Product with inferior Price
			+ checks the price has not changed
			+ raises the Price of the Product with superior Price
			+ checks the price was updated to the highest offer
			
		- testEquals :
			+ creates 2 instances of Product with same name
			+ checks that the equals method for Products returns true
			
		- testRealiseSale :
			+ makes 2 Products with same name
			+ adds them to the  the "knownUsers" list
			+ creates Prodct and publishes it
			+ calls the realiseSale method
			+ assert money flow was correctly handled
			+ asserts owner was updated.
	
		
--> users :


	--> User :

		- testUser : testing constructor
			+ tries to create invalid users (having one of their parameters to null)
			+ checks invalid users are set to null.
			
		- testGetFirstname :
			+ uses firstname getter to get global user's first name
			+ checks it is equal to the value we first entered
			
		- testGetLastname :
			+ uses lasttname getter to get global user's last name
			+ checks it is equal to the value we first entered
			
		- testAddtoMyproductList :
			+ makes Product
			+ adds it to the personnal products list
			+ checks it was enterd in the list
			
		- testEquals :
			+ makes 4 Users
			+ checks equals returns true only if two insances have the same address or the same name
		
		- testPay :
			+ makes 2 Users
			+ makes 2 Prices
			+ checks User cannot pay more than he has
			+ asserts that the prices have the right value
		
		
--> easybid :


	--> EasyBid :

		- testEasyBid : testing constructor
			+ creates new EasyBid
			+ asserts it isn't null
			
		!!!This method get's it's Standard Input from a file in EasyBid - src - easybid - tests
		- testCreateAndShowUsers :
			+ tries to open a FileInputStream from specified file
			+ lauches EasyBid with FileInputStream
			+ run's EasyBid